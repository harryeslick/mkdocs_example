{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"#deployment","title":"Deployment","text":""},{"location":"#aws-amplify","title":"AWS Amplify","text":""},{"location":"#reference-links","title":"reference links","text":"<p>https://realpython.com/python-project-documentation-with-mkdocs/#insert-information-from-docstrings https://jupytext.readthedocs.io/en/latest/index.html https://mkdocs-jupyter.danielfrg.com https://github.com/marketplace/actions/deploy-mkdocs#building-with-github_token https://github.com/mhausenblas/mkdocs-template</p>"},{"location":"mkdocstring_example/","title":"test Module","text":""},{"location":"mkdocstring_example/#dummy_package.tester.TestClass","title":"<code>TestClass</code>","text":"Source code in <code>dummy_package/tester.py</code> <pre><code>class TestClass:\n    def __init__(self, arg1: int, arg2: float):\n        \"\"\"\n        Initializes the TestClass instance.\n\n        Args:\n            arg1 (int): The first argument.\n            arg2 (float): The second argument.\n        \"\"\"\n        self.arg1 = arg1\n        self.arg2 = arg2\n\n    def add(self, arg3: float) -&gt; str:\n        \"\"\"\n        This is the first test method.\n\n        Args:\n            arg3 (float): The third argument.\n\n        Returns:\n            float: added\n\n        example:\n            &gt;&gt;&gt;TestClass(1,2).add(5) == 7\n\n        \"\"\"\n        return self.arg1 + self.arg2 + arg3\n\n    def multiply(self) -&gt; str:\n        \"\"\"\n        This is the second test method.\n\n        Args:\n            arg4 (bool): The fourth argument.\n\n        Returns:\n            float: mutipled attrs\n        \"\"\"\n        return self.arg1 * self.arg2\n</code></pre>"},{"location":"mkdocstring_example/#dummy_package.tester.TestClass.add","title":"<code>add(arg3)</code>","text":"<p>This is the first test method.</p> <p>Parameters:</p> Name Type Description Default <code>arg3</code> <code>float</code> <p>The third argument.</p> required <p>Returns:</p> Name Type Description <code>float</code> <code>str</code> <p>added</p> example <p>TestClass(1,2).add(5) == 7</p> Source code in <code>dummy_package/tester.py</code> <pre><code>def add(self, arg3: float) -&gt; str:\n    \"\"\"\n    This is the first test method.\n\n    Args:\n        arg3 (float): The third argument.\n\n    Returns:\n        float: added\n\n    example:\n        &gt;&gt;&gt;TestClass(1,2).add(5) == 7\n\n    \"\"\"\n    return self.arg1 + self.arg2 + arg3\n</code></pre>"},{"location":"mkdocstring_example/#dummy_package.tester.TestClass.multiply","title":"<code>multiply()</code>","text":"<p>This is the second test method.</p> <p>Parameters:</p> Name Type Description Default <code>arg4</code> <code>bool</code> <p>The fourth argument.</p> required <p>Returns:</p> Name Type Description <code>float</code> <code>str</code> <p>mutipled attrs</p> Source code in <code>dummy_package/tester.py</code> <pre><code>def multiply(self) -&gt; str:\n    \"\"\"\n    This is the second test method.\n\n    Args:\n        arg4 (bool): The fourth argument.\n\n    Returns:\n        float: mutipled attrs\n    \"\"\"\n    return self.arg1 * self.arg2\n</code></pre>"},{"location":"mkdocstring_example/#dummy_package.tester.test_function","title":"<code>test_function(arg1, arg2, arg3)</code>","text":"<p>This is a test function.</p> <p>Parameters:</p> Name Type Description Default <code>arg1</code> <code>int</code> <p>The first argument.</p> required <code>arg2</code> <code>float</code> <p>The second argument.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The concatenated string.</p> Source code in <code>dummy_package/tester.py</code> <pre><code>def test_function(arg1: int, arg2: str, arg3: float) -&gt; str:\n    \"\"\"\n    This is a test function.\n\n    Args:\n        arg1 (int): The first argument.\n        arg2 (float): The second argument.\n\n    Returns:\n        str: The concatenated string.\n    \"\"\"\n    # Your code here\n    return str(arg1) + arg2 + str(arg3)\n</code></pre>"},{"location":"notebooks/example/","title":"Example","text":"In\u00a0[1]: Copied! <pre>import geopandas as gpd\nimport geodatasets as gds\nnyc_dataset_path = gds.get_path('nybb')\nnyc = gpd.read_file(nyc_dataset_path)\n</pre> import geopandas as gpd import geodatasets as gds nyc_dataset_path = gds.get_path('nybb') nyc = gpd.read_file(nyc_dataset_path) <pre>Downloading file 'nybb_16a.zip' from 'https://www.nyc.gov/assets/planning/download/zip/data-maps/open-data/nybb_16a.zip' to '/home/runner/.cache/geodatasets'.\n</pre> <pre>Extracting 'nybb_16a/nybb.shp' from '/home/runner/.cache/geodatasets/nybb_16a.zip' to '/home/runner/.cache/geodatasets/nybb_16a.zip.unzip'\n</pre> <pre>Extracting 'nybb_16a/nybb.shx' from '/home/runner/.cache/geodatasets/nybb_16a.zip' to '/home/runner/.cache/geodatasets/nybb_16a.zip.unzip'\n</pre> <pre>Extracting 'nybb_16a/nybb.dbf' from '/home/runner/.cache/geodatasets/nybb_16a.zip' to '/home/runner/.cache/geodatasets/nybb_16a.zip.unzip'\n</pre> <pre>Extracting 'nybb_16a/nybb.prj' from '/home/runner/.cache/geodatasets/nybb_16a.zip' to '/home/runner/.cache/geodatasets/nybb_16a.zip.unzip'\n</pre> <p>To render HTML content in a Jupyter notebook, you can use the IPython.display module.</p> In\u00a0[2]: Copied! <pre>from IPython.display import display, HTML, IFrame\n\nnyc.explore()\n</pre> from IPython.display import display, HTML, IFrame  nyc.explore() Out[2]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[3]: Copied! <pre>from plotly import express as px\n\npx.choropleth_mapbox(nyc, locations='BoroCode', color='BoroName')\n</pre> from plotly import express as px  px.choropleth_mapbox(nyc, locations='BoroCode', color='BoroName') In\u00a0[4]: Copied! <pre>display(HTML(px.scatter(nyc, x='Shape_Leng', y='Shape_Area').to_html()))\n</pre> display(HTML(px.scatter(nyc, x='Shape_Leng', y='Shape_Area').to_html()))"}]}